name: Build wheels

on:
  push:
    branches: [ main, feature/migration ]
  pull_request:
    branches: [ main ]

jobs:
  build-wheels:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - platform: manylinux_x86_64
            runs-on: ubuntu-latest
          - platform: windows
            runs-on: windows-latest

    env:
      PYPACKAGE: "synavis"
      # Tell CMake to avoid building apps (faster) and enable decoding for wheels.
      CMAKE_ARGS: "-DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python (bootstrap)
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install scikit-build-core scikit-build cibuildwheel wheel

      # vcpkg will be bootstrapped and run inside the manylinux container
      # to ensure binaries (pkgconf, pkg-config tools, etc.) are compatible with
      # the container's glibc. We do not perform host-side vcpkg bootstrap for manylinux.

      - name: Restore vcpkg cache (manylinux)
        if: matrix.platform == 'manylinux_x86_64'
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/packages
            vcpkg/downloads
          key: vcpkg-linux-${{ runner.os }}-${{ hashFiles('**/vcpkg/ports/**') }}
          restore-keys: |
            vcpkg-linux-

      - name: Install system packages (Ubuntu runner)
        if: matrix.platform == 'manylinux_x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl zip unzip tar nasm yasm build-essential pkg-config

      - name: Prepare vcpkg inside manylinux container
        if: matrix.platform == 'manylinux_x86_64'
        # Inside the container install distro-specific: curl/zip/unzip/tar, the Perl IPC::Cmd package
        # and Linux kernel headers so vcpkg ports (e.g. openssl) can build.
        run: |
          echo "Bootstrapping vcpkg inside manylinux image"
          docker run --rm -v "${{ github.workspace }}:/project" quay.io/pypa/manylinux_2_28_x86_64:2025.10.10-1 \
            bash -lc 'set -euo pipefail
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y --no-install-recommends \
                nasm yasm curl zip unzip tar libipc-cmd-perl linux-libc-dev perl || true
            elif command -v dnf >/dev/null 2>&1; then
              dnf install -y \
                nasm yasm curl zip unzip tar perl-IPC-Cmd kernel-headers perl || true
            elif command -v yum >/dev/null 2>&1; then
              yum install -y \
                nasm yasm curl zip unzip tar perl-IPC-Cmd kernel-headers perl || true
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache \
                nasm yasm zip unzip curl tar perl-ipc-cmd linux-headers perl || true
            else
              echo "No package manager found inside container; continuing"
            fi
            cd /project
            if [ ! -d vcpkg ]; then
              git clone --single-branch --depth=1 https://github.com/microsoft/vcpkg.git vcpkg
            fi
            cd vcpkg
            ./bootstrap-vcpkg.sh
            ./vcpkg install openssl libpcap curl libuv ffmpeg zlib --triplet x64-linux'

      - name: Build wheels with cibuildwheel (manylinux)
        if: matrix.platform == 'manylinux_x86_64'
        env:
          CIBW_CMAKE_BUILD: "1"
          # build multiple Python versions; adjust as needed
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-*"
          # inside the manylinux container the project is copied to /project,
          # so point the CMake toolchain to the vcpkg path inside the container
          CIBW_ENVIRONMENT: "CMAKE_ARGS='-DCMAKE_TOOLCHAIN_FILE=/project/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis'"
        run: |
          python -m cibuildwheel --platform linux --output-dir wheelhouse

      - name: Bootstrap vcpkg (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "Bootstrapping vcpkg on Windows"
          $vcpkgDir = "$Env:GITHUB_WORKSPACE\vcpkg"
          if (-not (Test-Path $vcpkgDir)) {
            git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
            Push-Location $vcpkgDir
            .\bootstrap-vcpkg.bat
            Pop-Location
          }
          Push-Location $vcpkgDir
          .\vcpkg.exe install openssl libpcap curl libuv ffmpeg zlib --triplet x64-windows
          Pop-Location
          Write-Host "Copying vcpkg packages to output directory"
          New-Item -ItemType Directory -Path "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg" -Force
          Copy-Item -Path "$Env:GITHUB_WORKSPACE\vcpkg\installed" -Destination "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg\installed" -Recurse -Force
          Copy-Item -Path "$Env:GITHUB_WORKSPACE\vcpkg\packages" -Destination "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg\packages" -Recurse -Force

      - name: Cache vcpkg installed packages (Windows)
        if: matrix.platform == 'windows'
        uses: actions/cache@v4
        with:
          path: |
            vcpkg\\installed
            vcpkg\\packages
          key: vcpkg-windows-${{ runner.os }}-${{ hashFiles('**/vcpkg/installed/**') }}
          restore-keys: |
            vcpkg-windows-

      - name: Build wheels with cibuildwheel (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        env:
          CIBW_CMAKE_BUILD: "1"
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          # set CMAKE_POLICY_VERSION_MINIMUM so third-party CMakeLists with old minima can configure
          CIBW_ENVIRONMENT: "CMAKE_ARGS='-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DVCPKG_TARGET_TRIPLET=x64-windows -DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis'"
        run: |
          python -m cibuildwheel --platform windows --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.whl
