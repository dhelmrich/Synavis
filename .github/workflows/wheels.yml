name: Build wheels

on:
  push:
    branches: [ main, feature/migration ]
  pull_request:
    branches: [ main ]

jobs:
  build-wheels:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - platform: manylinux_x86_64
            runs-on: ubuntu-latest
          - platform: windows
            runs-on: windows-latest

    env:
      PYPACKAGE: "synavis"
      # Tell CMake to avoid building apps (faster) and enable decoding for wheels.
      CMAKE_ARGS: "-DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python (bootstrap)
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install scikit-build-core scikit-build cibuildwheel wheel

      # vcpkg will be bootstrapped and run inside the manylinux container
      # to ensure binaries (pkgconf, pkg-config tools, etc.) are compatible with
      # the container's glibc. We do not perform host-side vcpkg bootstrap for manylinux.

      - name: Restore vcpkg cache (manylinux)
        if: matrix.platform == 'manylinux_x86_64'
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/packages
            vcpkg/downloads
          key: vcpkg-linux-${{ runner.os }}-${{ hashFiles('**/vcpkg/ports/**') }}
          restore-keys: |
            vcpkg-linux-

      - name: Build wheels with cibuildwheel (manylinux)
        if: matrix.platform == 'manylinux_x86_64'
        env:
          CIBW_CMAKE_BUILD: "1"
          # build multiple Python versions; adjust as needed
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-*"
          # inside the manylinux container the project is copied to /project,
          # so point the CMake toolchain to the vcpkg path inside the container
          CIBW_ENVIRONMENT: "CMAKE_ARGS='-DCMAKE_TOOLCHAIN_FILE=/project/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis'"
          # Run vcpkg bootstrap and install inside the manylinux container so
          # binaries are built against the container libc (avoids GLIBC mismatch)
          CIBW_BEFORE_BUILD: |
            set -euo pipefail
            set -x
            echo "CIBW_BEFORE_BUILD: starting vcpkg bootstrap/install (logs -> /tmp/vcpkg-setup.log)"
            exec > >(tee /tmp/vcpkg-setup.log) 2>&1

            retry() {
              local -r max=$1; shift
              local -i i=0
              until "$@"; do
                i=$((i+1))
                if [ $i -ge $max ]; then
                  echo "Command failed after $i attempts: $*" >&2
                  return 1
                fi
                echo "Retry $i/$max for: $*" >&2
                sleep 2
              done
            }

            if [ ! -d /project/vcpkg ]; then
              echo "Cloning vcpkg into /project/vcpkg"
              retry 3 git clone --single-branch --depth=1 https://github.com/microsoft/vcpkg.git /project/vcpkg
            else
              echo "vcpkg already present at /project/vcpkg"
            fi

            # Try bootstrapping vcpkg (may download a prebuilt binary or build from source)
            pushd /project/vcpkg
            if [ ! -x ./vcpkg ]; then
              echo "Bootstrapping vcpkg"
              retry 3 ./bootstrap-vcpkg.sh || {
                echo "bootstrap-vcpkg.sh failed; printing /tmp/vcpkg-setup.log and aborting" >&2
                cat /tmp/vcpkg-setup.log || true
                exit 1
              }
            else
              echo "vcpkg executable already present"
            fi

            # Install the requested ports inside the container (container-native binaries)
            echo "Installing vcpkg ports: openssl libpcap curl libuv ffmpeg zlib"
            retry 3 ./vcpkg install openssl libpcap curl libuv ffmpeg zlib --triplet x64-linux || {
              echo "vcpkg install failed; printing /tmp/vcpkg-setup.log" >&2
              cat /tmp/vcpkg-setup.log || true
              exit 1
            }
            popd
        run: |
          python -m cibuildwheel --platform linux --output-dir wheelhouse

      - name: Bootstrap vcpkg (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          Write-Host "Bootstrapping vcpkg on Windows"
          $vcpkgDir = "$Env:GITHUB_WORKSPACE\vcpkg"
          if (-not (Test-Path $vcpkgDir)) {
            git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
            Push-Location $vcpkgDir
            .\bootstrap-vcpkg.bat
            Pop-Location
          }
          Push-Location $vcpkgDir
          .\vcpkg.exe install openssl libpcap curl libuv ffmpeg zlib --triplet x64-windows
          Pop-Location
          Write-Host "Copying vcpkg packages to output directory"
          New-Item -ItemType Directory -Path "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg" -Force
          Copy-Item -Path "$Env:GITHUB_WORKSPACE\vcpkg\installed" -Destination "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg\installed" -Recurse -Force
          Copy-Item -Path "$Env:GITHUB_WORKSPACE\vcpkg\packages" -Destination "$Env:GITHUB_WORKSPACE\wheelhouse\vcpkg\packages" -Recurse -Force

      - name: Cache vcpkg installed packages (Windows)
        if: matrix.platform == 'windows'
        uses: actions/cache@v4
        with:
          path: |
            vcpkg\\installed
            vcpkg\\packages
          key: vcpkg-windows-${{ runner.os }}-${{ hashFiles('**/vcpkg/installed/**') }}
          restore-keys: |
            vcpkg-windows-

      - name: Build wheels with cibuildwheel (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        env:
          CIBW_CMAKE_BUILD: "1"
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          # set CMAKE_POLICY_VERSION_MINIMUM so third-party CMakeLists with old minima can configure
          CIBW_ENVIRONMENT: "CMAKE_ARGS='-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DVCPKG_TARGET_TRIPLET=x64-windows -DBUILD_WITH_APPS=Off -DBUILD_WITH_DECODING=On -DPY_PACKAGE_NAME=synavis'"
        run: |
          python -m cibuildwheel --platform windows --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.whl
